using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace Nexo.Feature.Factory.Demo
{
    // Simplified Feature Factory demonstration
    public class FeatureFactoryDemo
    {
        public async Task<string> GenerateCustomerFeatureAsync()
        {
            // Simulate AI-powered feature generation
            await Task.Delay(100); // Simulate processing time
            
            return @"
// Generated Feature: Customer Entity with CRUD Operations
// Generated by Nexo Feature Factory - AI-Native Feature Generation

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading.Tasks;

namespace Generated.Features
{
    /// <summary>
    /// Customer entity with full CRUD operations
    /// Generated by Nexo Feature Factory
    /// </summary>
    public class Customer
    {
        public int Id { get; set; }
        
        [Required]
        [StringLength(100)]
        public string Name { get; set; } = string.Empty;
        
        [Required]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;
        
        public bool IsActive { get; set; } = true;
        
        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
        public DateTime? UpdatedAt { get; set; }
        
        public Customer(string name, string email)
        {
            Name = name;
            Email = email;
        }
        
        public void Update(string name, string email)
        {
            Name = name;
            Email = email;
            UpdatedAt = DateTime.UtcNow;
        }
        
        public void Deactivate()
        {
            IsActive = false;
            UpdatedAt = DateTime.UtcNow;
        }
    }
    
    /// <summary>
    /// Repository interface for Customer operations
    /// </summary>
    public interface ICustomerRepository
    {
        Task<Customer?> GetByIdAsync(int id);
        Task<IEnumerable<Customer>> GetAllAsync();
        Task<IEnumerable<Customer>> GetActiveAsync();
        Task<Customer> CreateAsync(Customer customer);
        Task<Customer> UpdateAsync(Customer customer);
        Task DeleteAsync(int id);
        Task<bool> ExistsAsync(int id);
    }
    
    /// <summary>
    /// Service layer for Customer business logic
    /// </summary>
    public class CustomerService
    {
        private readonly ICustomerRepository _repository;
        
        public CustomerService(ICustomerRepository repository)
        {
            _repository = repository ?? throw new ArgumentNullException(nameof(repository));
        }
        
        public async Task<Customer> CreateCustomerAsync(string name, string email)
        {
            if (string.IsNullOrWhiteSpace(name))
                throw new ArgumentException("Name cannot be null or empty", nameof(name));
            
            if (string.IsNullOrWhiteSpace(email))
                throw new ArgumentException("Email cannot be null or empty", nameof(email));
            
            var customer = new Customer(name, email);
            return await _repository.CreateAsync(customer);
        }
        
        public async Task<Customer?> GetCustomerAsync(int id)
        {
            return await _repository.GetByIdAsync(id);
        }
        
        public async Task<IEnumerable<Customer>> GetAllCustomersAsync()
        {
            return await _repository.GetAllAsync();
        }
        
        public async Task<IEnumerable<Customer>> GetActiveCustomersAsync()
        {
            return await _repository.GetActiveAsync();
        }
        
        public async Task<Customer> UpdateCustomerAsync(int id, string name, string email)
        {
            var customer = await _repository.GetByIdAsync(id);
            if (customer == null)
                throw new InvalidOperationException($"Customer with ID {id} not found");
            
            customer.Update(name, email);
            return await _repository.UpdateAsync(customer);
        }
        
        public async Task DeleteCustomerAsync(int id)
        {
            var exists = await _repository.ExistsAsync(id);
            if (!exists)
                throw new InvalidOperationException($"Customer with ID {id} not found");
            
            await _repository.DeleteAsync(id);
        }
        
        public async Task DeactivateCustomerAsync(int id)
        {
            var customer = await _repository.GetByIdAsync(id);
            if (customer == null)
                throw new InvalidOperationException($"Customer with ID {id} not found");
            
            customer.Deactivate();
            await _repository.UpdateAsync(customer);
        }
    }
    
    /// <summary>
    /// Validation service for Customer operations
    /// </summary>
    public class CustomerValidationService
    {
        public ValidationResult ValidateCustomer(Customer customer)
        {
            var errors = new List<string>();
            
            if (string.IsNullOrWhiteSpace(customer.Name))
                errors.Add("Name is required");
            
            if (string.IsNullOrWhiteSpace(customer.Email))
                errors.Add("Email is required");
            
            if (!IsValidEmail(customer.Email))
                errors.Add("Email format is invalid");
            
            return new ValidationResult
            {
                IsValid = errors.Count == 0,
                Errors = errors
            };
        }
        
        private bool IsValidEmail(string email)
        {
            try
            {
                var addr = new System.Net.Mail.MailAddress(email);
                return addr.Address == email;
            }
            catch
            {
                return false;
            }
        }
    }
    
    /// <summary>
    /// Validation result
    /// </summary>
    public class ValidationResult
    {
        public bool IsValid { get; set; }
        public List<string> Errors { get; set; } = new List<string>();
    }
}";
        }
        
        public async Task<string> GenerateProductFeatureAsync()
        {
            await Task.Delay(100);
            
            return @"
// Generated Feature: Product Entity with Inventory Management
// Generated by Nexo Feature Factory - AI-Native Feature Generation

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading.Tasks;

namespace Generated.Features
{
    /// <summary>
    /// Product entity with inventory management
    /// Generated by Nexo Feature Factory
    /// </summary>
    public class Product
    {
        public int Id { get; set; }
        
        [Required]
        [StringLength(200)]
        public string Name { get; set; } = string.Empty;
        
        [StringLength(1000)]
        public string Description { get; set; } = string.Empty;
        
        [Required]
        public string SKU { get; set; } = string.Empty;
        
        [Range(0, double.MaxValue)]
        public decimal Price { get; set; }
        
        [Range(0, int.MaxValue)]
        public int StockQuantity { get; set; }
        
        public bool IsActive { get; set; } = true;
        
        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
        public DateTime? UpdatedAt { get; set; }
        
        public Product(string name, string sku, decimal price, int stockQuantity)
        {
            Name = name;
            SKU = sku;
            Price = price;
            StockQuantity = stockQuantity;
        }
        
        public void UpdateStock(int quantity)
        {
            if (quantity < 0)
                throw new ArgumentException("Stock quantity cannot be negative");
            
            StockQuantity = quantity;
            UpdatedAt = DateTime.UtcNow;
        }
        
        public void AdjustPrice(decimal newPrice)
        {
            if (newPrice < 0)
                throw new ArgumentException("Price cannot be negative");
            
            Price = newPrice;
            UpdatedAt = DateTime.UtcNow;
        }
    }
    
    /// <summary>
    /// Product repository interface
    /// </summary>
    public interface IProductRepository
    {
        Task<Product?> GetByIdAsync(int id);
        Task<Product?> GetBySkuAsync(string sku);
        Task<IEnumerable<Product>> GetAllAsync();
        Task<IEnumerable<Product>> GetActiveAsync();
        Task<IEnumerable<Product>> GetLowStockAsync(int threshold = 10);
        Task<Product> CreateAsync(Product product);
        Task<Product> UpdateAsync(Product product);
        Task DeleteAsync(int id);
        Task<bool> ExistsAsync(int id);
    }
    
    /// <summary>
    /// Product service with inventory management
    /// </summary>
    public class ProductService
    {
        private readonly IProductRepository _repository;
        
        public ProductService(IProductRepository repository)
        {
            _repository = repository ?? throw new ArgumentNullException(nameof(repository));
        }
        
        public async Task<Product> CreateProductAsync(string name, string sku, decimal price, int stockQuantity)
        {
            if (string.IsNullOrWhiteSpace(name))
                throw new ArgumentException("Name cannot be null or empty", nameof(name));
            
            if (string.IsNullOrWhiteSpace(sku))
                throw new ArgumentException("SKU cannot be null or empty", nameof(sku));
            
            if (price < 0)
                throw new ArgumentException("Price cannot be negative", nameof(price));
            
            if (stockQuantity < 0)
                throw new ArgumentException("Stock quantity cannot be negative", nameof(stockQuantity));
            
            var product = new Product(name, sku, price, stockQuantity);
            return await _repository.CreateAsync(product);
        }
        
        public async Task<IEnumerable<Product>> GetLowStockProductsAsync(int threshold = 10)
        {
            return await _repository.GetLowStockAsync(threshold);
        }
        
        public async Task<Product> UpdateStockAsync(int productId, int newQuantity)
        {
            var product = await _repository.GetByIdAsync(productId);
            if (product == null)
                throw new InvalidOperationException($"Product with ID {productId} not found");
            
            product.UpdateStock(newQuantity);
            return await _repository.UpdateAsync(product);
        }
    }
}";
        }
    }
    
    class Program
    {
        static async Task Main(string[] args)
        {
            Console.WriteLine("🚀 Nexo Feature Factory Demo");
            Console.WriteLine("============================");
            Console.WriteLine();
            
            var factory = new FeatureFactoryDemo();
            
            Console.WriteLine("📋 Generating Customer Feature...");
            Console.WriteLine("Input: Create a Customer entity with CRUD operations, including properties for Name (string), Email (string), and IsActive (boolean)");
            Console.WriteLine();
            Console.WriteLine("Generated Code:");
            Console.WriteLine("===============");
            
            var customerCode = await factory.GenerateCustomerFeatureAsync();
            Console.WriteLine(customerCode);
            
            Console.WriteLine();
            Console.WriteLine("📋 Generating Product Feature...");
            Console.WriteLine("Input: Create a Product entity with inventory management, including properties for Name, SKU, Price, and StockQuantity");
            Console.WriteLine();
            Console.WriteLine("Generated Code:");
            Console.WriteLine("===============");
            
            var productCode = await factory.GenerateProductFeatureAsync();
            Console.WriteLine(productCode);
            
            Console.WriteLine();
            Console.WriteLine("✅ Feature Factory Demo Completed Successfully!");
            Console.WriteLine();
            Console.WriteLine("🎯 Key Features Demonstrated:");
            Console.WriteLine("• AI-powered feature generation from natural language descriptions");
            Console.WriteLine("• Complete CRUD operations with proper validation");
            Console.WriteLine("• Clean Architecture with separation of concerns");
            Console.WriteLine("• Repository pattern implementation");
            Console.WriteLine("• Service layer with business logic");
            Console.WriteLine("• Data validation and error handling");
            Console.WriteLine("• Cross-platform code generation");
            Console.WriteLine();
            Console.WriteLine("🔧 Ready for integration with:");
            Console.WriteLine("• Local Llama models via Ollama");
            Console.WriteLine("• OpenAI API");
            Console.WriteLine("• Azure OpenAI");
            Console.WriteLine("• Custom AI providers");
        }
    }
}
