using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Nexo.Feature.Analysis.Interfaces;
using Nexo.Feature.Analysis.Models;
using Nexo.Feature.Analysis.Services;
using Nexo.Feature.Factory.Application.Interfaces;
using Nexo.Feature.Factory.Domain.Models;

namespace Examples
{
    /// <summary>
    /// Example demonstrating how to use the configurable coding standards analyzer
    /// with code generation agents in the Nexo framework.
    /// </summary>
    public class CodingStandardsUsageExample
    {
        private readonly IServiceProvider _serviceProvider;
        private readonly ILogger<CodingStandardsUsageExample> _logger;

        public CodingStandardsUsageExample(IServiceProvider serviceProvider, ILogger<CodingStandardsUsageExample> logger)
        {
            _serviceProvider = serviceProvider;
            _logger = logger;
        }

        /// <summary>
        /// Demonstrates basic usage of the coding standards analyzer.
        /// </summary>
        public async Task BasicUsageExampleAsync()
        {
            _logger.LogInformation("Starting basic coding standards usage example");

            // Get the coding standards analyzer
            var analyzer = _serviceProvider.GetRequiredService<ICodingStandardAnalyzer>();

            // Sample code to validate
            var sampleCode = @"
using System;

public class UserService
{
    public string GetUser(int userId)
    {
        if (userId <= 0)
            throw new ArgumentException(""Invalid user ID"");
        
        return ""User"" + userId.ToString();
    }
}";

            // Validate the code
            var result = await analyzer.ValidateCodeAsync(sampleCode, "UserService.cs", "code-generation-agent");

            _logger.LogInformation("Validation Result:");
            _logger.LogInformation("- Is Valid: {IsValid}", result.IsValid);
            _logger.LogInformation("- Quality Score: {Score}/100", result.Score);
            _logger.LogInformation("- Violations: {ViolationCount}", result.Violations.Count);
            _logger.LogInformation("- Summary: {Summary}", result.Summary);

            // Display violations
            foreach (var violation in result.Violations)
            {
                _logger.LogWarning("Violation: {Message} at line {LineNumber}", 
                    violation.Message, violation.LineNumber);
            }

            // Auto-fix if enabled
            if (!result.IsValid && analyzer.GetConfiguration().GlobalSettings.AutoFixEnabled)
            {
                var (fixedCode, appliedFixes) = await analyzer.AutoFixCodeAsync(
                    sampleCode, "UserService.cs", "code-generation-agent");

                _logger.LogInformation("Auto-fix applied {FixCount} fixes", appliedFixes.Count);
                foreach (var fix in appliedFixes)
                {
                    _logger.LogInformation("Applied fix: {Fix}", fix);
                }
            }
        }

        /// <summary>
        /// Demonstrates integration with code generation agents.
        /// </summary>
        public async Task AgentIntegrationExampleAsync()
        {
            _logger.LogInformation("Starting agent integration example");

            // Get the integration service
            var integrationService = _serviceProvider.GetRequiredService<AgentCodingStandardsIntegrationService>();

            // Simulate code generated by an agent
            var generatedCode = new Dictionary<string, string>
            {
                ["User.cs"] = @"
using System;

public class User
{
    public int id { get; set; }
    public string name { get; set; }
    
    public string getDisplayName()
    {
        return name;
    }
}",
                ["IUserRepository.cs"] = @"
using System;

public interface UserRepository
{
    User GetById(int id);
    void Save(User user);
}"
            };

            // Validate all generated code
            var results = await integrationService.ValidateAgentGeneratedCodeFilesAsync(
                "code-generation-agent", generatedCode);

            _logger.LogInformation("Agent Code Validation Results:");
            foreach (var result in results)
            {
                _logger.LogInformation("File: {FilePath}", result.Key);
                _logger.LogInformation("- Valid: {IsValid}, Score: {Score}", 
                    result.Value.IsValid, result.Value.QualityScore);
                
                if (result.Value.WasAutoFixed)
                {
                    _logger.LogInformation("- Auto-fixed: {FixCount} fixes applied", 
                        result.Value.AppliedFixes.Count);
                }
            }

            // Get recommendations for the agent
            var recommendations = await integrationService.GetAgentRecommendationsAsync("code-generation-agent");
            _logger.LogInformation("Agent Recommendations: {Count}", recommendations.Count);
            
            foreach (var recommendation in recommendations)
            {
                _logger.LogInformation("- {StandardName}: {Description}", 
                    recommendation.StandardName, recommendation.Description);
            }
        }

        /// <summary>
        /// Demonstrates configuration management.
        /// </summary>
        public async Task ConfigurationExampleAsync()
        {
            _logger.LogInformation("Starting configuration example");

            var analyzer = _serviceProvider.GetRequiredService<ICodingStandardAnalyzer>();
            var configService = _serviceProvider.GetRequiredService<ICodingStandardConfigurationService>();

            // Load configuration from file
            await analyzer.LoadConfigurationAsync("examples/coding-standards-config.json");

            // Get current configuration
            var config = analyzer.GetConfiguration();
            _logger.LogInformation("Loaded configuration: {Name} with {StandardCount} standards", 
                config.Name, config.Standards.Count);

            // Get available standards
            var availableStandards = await analyzer.GetAvailableStandardsAsync();
            _logger.LogInformation("Available standards: {Count}", availableStandards.Count);

            // Get standards for specific agent
            var agentStandards = await analyzer.GetStandardsForAgentAsync("code-generation-agent");
            _logger.LogInformation("Standards for code-generation-agent: {Count}", agentStandards.Count);

            // Get standards for specific file type
            var fileTypeStandards = await analyzer.GetStandardsForFileTypeAsync(".cs");
            _logger.LogInformation("Standards for .cs files: {Count}", fileTypeStandards.Count);

            // Get statistics
            var statistics = await analyzer.GetStatisticsAsync();
            _logger.LogInformation("Analyzer Statistics:");
            _logger.LogInformation("- Total Standards: {TotalStandards}", statistics.TotalStandards);
            _logger.LogInformation("- Total Rules: {TotalRules}", statistics.TotalRules);
            _logger.LogInformation("- Total Validations: {TotalValidations}", statistics.TotalValidations);
        }

        /// <summary>
        /// Demonstrates creating a custom coding standard.
        /// </summary>
        public async Task CustomStandardExampleAsync()
        {
            _logger.LogInformation("Starting custom standard example");

            var analyzer = _serviceProvider.GetRequiredService<ICodingStandardAnalyzer>();

            // Create a custom coding standard
            var customStandard = new CodingStandard
            {
                Id = "custom-nexo-standards",
                Name = "Custom Nexo Standards",
                Description = "Custom coding standards for Nexo framework",
                Language = "csharp",
                IsEnabled = true,
                Priority = 5,
                Rules = new List<CodingStandardRule>
                {
                    new CodingStandardRule
                    {
                        Id = "nexo-namespace-convention",
                        Name = "Nexo Namespace Convention",
                        Description = "All classes should be in Nexo.* namespace",
                        Category = "Naming",
                        Severity = CodingStandardSeverity.Error,
                        Type = CodingStandardRuleType.Pattern,
                        Pattern = @"namespace\s+Nexo\.",
                        ErrorMessage = "Classes should be in Nexo.* namespace",
                        SuggestedFix = "Move class to appropriate Nexo.* namespace",
                        IsEnabled = true,
                        FilePatterns = new List<string> { "*.cs" }
                    },
                    new CodingStandardRule
                    {
                        Id = "nexo-logging-convention",
                        Name = "Nexo Logging Convention",
                        Description = "Use structured logging with ILogger",
                        Category = "Architecture",
                        Severity = CodingStandardSeverity.Warning,
                        Type = CodingStandardRuleType.Pattern,
                        Pattern = @"ILogger<[^>]+>",
                        ErrorMessage = "Use structured logging with ILogger<T>",
                        SuggestedFix = "Inject ILogger<T> and use structured logging",
                        IsEnabled = true,
                        FilePatterns = new List<string> { "*.cs" }
                    }
                }
            };

            // Get current configuration and add custom standard
            var config = analyzer.GetConfiguration();
            config.Standards.Add(customStandard);

            // Update configuration
            await analyzer.UpdateConfigurationAsync(config);

            _logger.LogInformation("Added custom standard: {Name} with {RuleCount} rules", 
                customStandard.Name, customStandard.Rules.Count);

            // Test the custom standard
            var testCode = @"
using System;

namespace MyApp
{
    public class TestClass
    {
        public void DoSomething()
        {
            Console.WriteLine(""Hello World"");
        }
    }
}";

            var result = await analyzer.ValidateCodeAsync(testCode, "TestClass.cs", "code-generation-agent");
            
            _logger.LogInformation("Custom Standard Validation:");
            _logger.LogInformation("- Violations: {ViolationCount}", result.Violations.Count);
            foreach (var violation in result.Violations)
            {
                _logger.LogWarning("- {Message}", violation.Message);
            }
        }

        /// <summary>
        /// Demonstrates compliance reporting.
        /// </summary>
        public async Task ComplianceReportingExampleAsync()
        {
            _logger.LogInformation("Starting compliance reporting example");

            var integrationService = _serviceProvider.GetRequiredService<AgentCodingStandardsIntegrationService>();

            // Get compliance summary
            var summary = await integrationService.GetComplianceSummaryAsync();

            _logger.LogInformation("Coding Standards Compliance Summary:");
            _logger.LogInformation("- Total Agents: {TotalAgents}", summary.TotalAgents);
            _logger.LogInformation("- Configured Agents: {ConfiguredAgents}", summary.ConfiguredAgents);
            _logger.LogInformation("- Total Standards: {TotalStandards}", summary.TotalStandards);
            _logger.LogInformation("- Enabled Standards: {EnabledStandards}", summary.EnabledStandards);
            _logger.LogInformation("- Total Rules: {TotalRules}", summary.TotalRules);
            _logger.LogInformation("- Enabled Rules: {EnabledRules}", summary.EnabledRules);
            _logger.LogInformation("- Total Validations: {TotalValidations}", summary.TotalValidations);
            _logger.LogInformation("- Total Violations: {TotalViolations}", summary.TotalViolations);
            _logger.LogInformation("- Total Auto-fixes: {TotalAutoFixes}", summary.TotalAutoFixes);
            _logger.LogInformation("- Average Quality Score: {AverageScore:F1}", summary.AverageQualityScore);

            _logger.LogInformation("Agent Compliance Details:");
            foreach (var agentCompliance in summary.AgentCompliance)
            {
                _logger.LogInformation("- {AgentId}: Configured={IsConfigured}, Standards={AppliedStandards}, Threshold={SeverityThreshold}", 
                    agentCompliance.AgentId, agentCompliance.IsConfigured, 
                    agentCompliance.AppliedStandards, agentCompliance.SeverityThreshold);
            }
        }

        /// <summary>
        /// Runs all examples.
        /// </summary>
        public async Task RunAllExamplesAsync()
        {
            try
            {
                await BasicUsageExampleAsync();
                await Task.Delay(1000); // Small delay between examples

                await AgentIntegrationExampleAsync();
                await Task.Delay(1000);

                await ConfigurationExampleAsync();
                await Task.Delay(1000);

                await CustomStandardExampleAsync();
                await Task.Delay(1000);

                await ComplianceReportingExampleAsync();

                _logger.LogInformation("All coding standards examples completed successfully");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error running coding standards examples");
                throw;
            }
        }
    }

    /// <summary>
    /// Extension methods for easy setup of coding standards in dependency injection.
    /// </summary>
    public static class CodingStandardsExtensions
    {
        /// <summary>
        /// Adds coding standards services with default configuration.
        /// </summary>
        public static IServiceCollection AddCodingStandardsWithDefaults(this IServiceCollection services)
        {
            services.AddAnalysisFeature();
            return services;
        }

        /// <summary>
        /// Adds coding standards services with custom configuration.
        /// </summary>
        public static IServiceCollection AddCodingStandardsWithConfiguration(
            this IServiceCollection services, 
            string configFilePath)
        {
            services.AddAnalysisFeature();
            
            // Configure to load from file on startup
            services.AddTransient<ICodingStandardAnalyzer>(provider =>
            {
                var analyzer = provider.GetRequiredService<ICodingStandardAnalyzer>();
                // Load configuration asynchronously - in real usage, this would be done during startup
                return analyzer;
            });

            return services;
        }
    }
}
