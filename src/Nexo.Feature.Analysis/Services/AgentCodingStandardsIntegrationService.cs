using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Nexo.Feature.Analysis.Interfaces;
using Nexo.Feature.Analysis.Models;

namespace Nexo.Feature.Analysis.Services
{
    /// <summary>
    /// Service that integrates coding standards enforcement with code generation agents.
    /// This service acts as a bridge between the existing agent architecture and the coding standards analyzer.
    /// </summary>
    public class AgentCodingStandardsIntegrationService
    {
        private readonly ILogger<AgentCodingStandardsIntegrationService> _logger;
        private readonly ICodingStandardAnalyzer _codingStandardAnalyzer;

        public AgentCodingStandardsIntegrationService(
            ILogger<AgentCodingStandardsIntegrationService> logger,
            ICodingStandardAnalyzer codingStandardAnalyzer)
        {
            _logger = logger ?? throw new ArgumentNullException(nameof(logger));
            _codingStandardAnalyzer = codingStandardAnalyzer ?? throw new ArgumentNullException(nameof(codingStandardAnalyzer));
        }

        /// <summary>
        /// Validates code generated by an agent against coding standards.
        /// </summary>
        /// <param name="agentId">The ID of the agent that generated the code</param>
        /// <param name="generatedCode">The code generated by the agent</param>
        /// <param name="filePath">The file path for the generated code</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Validation result and optionally fixed code</returns>
        public async Task<AgentCodeValidationResult> ValidateAgentGeneratedCodeAsync(
            string agentId,
            string generatedCode,
            string? filePath = null,
            CancellationToken cancellationToken = default)
        {
            _logger.LogInformation("Validating code generated by agent {AgentId}", agentId);

            try
            {
                // Validate the generated code
                var validationResult = await _codingStandardAnalyzer.ValidateCodeAsync(
                    generatedCode, 
                    filePath, 
                    agentId, 
                    cancellationToken);

                var result = new AgentCodeValidationResult
                {
                    AgentId = agentId,
                    FilePath = filePath,
                    ValidationResult = validationResult,
                    IsValid = validationResult.IsValid,
                    QualityScore = validationResult.Score
                };

                // Auto-fix if enabled and validation failed
                if (!validationResult.IsValid && _codingStandardAnalyzer.GetConfiguration().GlobalSettings.AutoFixEnabled)
                {
                    var (fixedCode, appliedFixes) = await _codingStandardAnalyzer.AutoFixCodeAsync(
                        generatedCode, 
                        filePath, 
                        agentId, 
                        cancellationToken);

                    result.FixedCode = fixedCode;
                    result.AppliedFixes = appliedFixes;
                    result.WasAutoFixed = appliedFixes.Any();

                    // Re-validate the fixed code
                    if (result.WasAutoFixed)
                    {
                        var fixedValidationResult = await _codingStandardAnalyzer.ValidateCodeAsync(
                            fixedCode, 
                            filePath, 
                            agentId, 
                            cancellationToken);

                        result.FixedValidationResult = fixedValidationResult;
                        result.IsValidAfterFix = fixedValidationResult.IsValid;
                        result.QualityScoreAfterFix = fixedValidationResult.Score;
                    }
                }

                _logger.LogInformation("Code validation completed for agent {AgentId}. Valid: {IsValid}, Score: {Score}", 
                    agentId, result.IsValid, result.QualityScore);

                return result;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error validating code generated by agent {AgentId}", agentId);
                return new AgentCodeValidationResult
                {
                    AgentId = agentId,
                    FilePath = filePath,
                    IsValid = false,
                    QualityScore = 0,
                    ErrorMessage = ex.Message
                };
            }
        }

        /// <summary>
        /// Validates multiple code files generated by an agent.
        /// </summary>
        /// <param name="agentId">The ID of the agent that generated the code</param>
        /// <param name="generatedCodeFiles">Dictionary of file paths to generated code</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Validation results for all files</returns>
        public async Task<Dictionary<string, AgentCodeValidationResult>> ValidateAgentGeneratedCodeFilesAsync(
            string agentId,
            Dictionary<string, string> generatedCodeFiles,
            CancellationToken cancellationToken = default)
        {
            _logger.LogInformation("Validating {FileCount} code files generated by agent {AgentId}", 
                generatedCodeFiles.Count, agentId);

            var results = new Dictionary<string, AgentCodeValidationResult>();

            foreach (var file in generatedCodeFiles)
            {
                var result = await ValidateAgentGeneratedCodeAsync(agentId, file.Value, file.Key, cancellationToken);
                results[file.Key] = result;
            }

            return results;
        }

        /// <summary>
        /// Validates code artifacts generated by agents.
        /// </summary>
        /// <param name="artifacts">Dictionary of file paths to code content with metadata</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Validation results for all artifacts</returns>
        public async Task<Dictionary<string, AgentCodeValidationResult>> ValidateCodeArtifactsAsync(
            Dictionary<string, (string Content, string? GeneratedBy)> artifacts,
            CancellationToken cancellationToken = default)
        {
            _logger.LogInformation("Validating {ArtifactCount} code artifacts", artifacts.Count);

            var results = new Dictionary<string, AgentCodeValidationResult>();

            foreach (var artifact in artifacts)
            {
                var result = await ValidateAgentGeneratedCodeAsync(
                    artifact.Value.GeneratedBy ?? "unknown-agent",
                    artifact.Value.Content,
                    artifact.Key,
                    cancellationToken);

                results[artifact.Key] = result;
            }

            return results;
        }

        /// <summary>
        /// Gets coding standards recommendations for an agent.
        /// </summary>
        /// <param name="agentId">The agent ID</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>List of coding standards recommendations</returns>
        public async Task<List<CodingStandardRecommendation>> GetAgentRecommendationsAsync(
            string agentId,
            CancellationToken cancellationToken = default)
        {
            _logger.LogInformation("Getting coding standards recommendations for agent {AgentId}", agentId);

            try
            {
                var applicableStandards = await _codingStandardAnalyzer.GetStandardsForAgentAsync(agentId);
                var recommendations = new List<CodingStandardRecommendation>();

                foreach (var standard in applicableStandards)
                {
                    var recommendation = new CodingStandardRecommendation
                    {
                        AgentId = agentId,
                        StandardId = standard.Id,
                        StandardName = standard.Name,
                        Description = standard.Description,
                        Priority = standard.Priority,
                        Rules = standard.Rules.Where(r => r.IsEnabled).ToList(),
                        EstimatedImpact = CalculateEstimatedImpact(standard),
                        ImplementationGuidance = GenerateImplementationGuidance(standard)
                    };

                    recommendations.Add(recommendation);
                }

                return recommendations.OrderByDescending(r => r.Priority).ToList();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error getting recommendations for agent {AgentId}", agentId);
                return new List<CodingStandardRecommendation>();
            }
        }

        /// <summary>
        /// Configures coding standards for a specific agent.
        /// </summary>
        /// <param name="agentId">The agent ID</param>
        /// <param name="standards">The standards to apply to the agent</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Task representing the configuration operation</returns>
        public async Task ConfigureAgentStandardsAsync(
            string agentId,
            List<string> standards,
            CancellationToken cancellationToken = default)
        {
            _logger.LogInformation("Configuring coding standards for agent {AgentId}", agentId);

            try
            {
                var configuration = _codingStandardAnalyzer.GetConfiguration();
                
                if (!configuration.AgentSettings.ContainsKey(agentId))
                {
                    configuration.AgentSettings[agentId] = new CodingStandardAgentSettings
                    {
                        AgentId = agentId,
                        IsEnabled = true
                    };
                }

                configuration.AgentSettings[agentId].AppliedStandards = standards;

                await _codingStandardAnalyzer.UpdateConfigurationAsync(configuration, cancellationToken);
                _logger.LogInformation("Coding standards configured for agent {AgentId}", agentId);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error configuring standards for agent {AgentId}", agentId);
                throw;
            }
        }

        /// <summary>
        /// Gets a summary of coding standards compliance for all agents.
        /// </summary>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Compliance summary</returns>
        public async Task<CodingStandardsComplianceSummary> GetComplianceSummaryAsync(
            CancellationToken cancellationToken = default)
        {
            _logger.LogInformation("Generating coding standards compliance summary");

            try
            {
                var configuration = _codingStandardAnalyzer.GetConfiguration();
                var statistics = await _codingStandardAnalyzer.GetStatisticsAsync();

                var summary = new CodingStandardsComplianceSummary
                {
                    TotalAgents = configuration.AgentSettings.Count,
                    ConfiguredAgents = configuration.AgentSettings.Count(a => a.Value.IsEnabled),
                    TotalStandards = configuration.Standards.Count,
                    EnabledStandards = configuration.Standards.Count(s => s.IsEnabled),
                    TotalRules = configuration.Standards.Sum(s => s.Rules.Count),
                    EnabledRules = configuration.Standards.Sum(s => s.Rules.Count(r => r.IsEnabled)),
                    TotalValidations = statistics.TotalValidations,
                    TotalViolations = statistics.TotalViolations,
                    TotalAutoFixes = statistics.TotalAutoFixes,
                    AverageQualityScore = CalculateAverageQualityScore(statistics),
                    LastUpdated = statistics.LastConfigurationUpdate
                };

                // Add agent-specific compliance data
                foreach (var agentSetting in configuration.AgentSettings)
                {
                    var agentCompliance = new AgentComplianceData
                    {
                        AgentId = agentSetting.Key,
                        IsConfigured = agentSetting.Value.IsEnabled,
                        AppliedStandards = agentSetting.Value.AppliedStandards.Count,
                        SeverityThreshold = agentSetting.Value.SeverityThreshold,
                        AutoFixEnabled = agentSetting.Value.AutoFixEnabled
                    };

                    summary.AgentCompliance.Add(agentCompliance);
                }

                return summary;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error generating compliance summary");
                return new CodingStandardsComplianceSummary();
            }
        }

        private string CalculateEstimatedImpact(CodingStandard standard)
        {
            var ruleCount = standard.Rules.Count(r => r.IsEnabled);
            var criticalRules = standard.Rules.Count(r => r.IsEnabled && r.Severity == CodingStandardSeverity.Critical);
            var errorRules = standard.Rules.Count(r => r.IsEnabled && r.Severity == CodingStandardSeverity.Error);

            if (criticalRules > 0)
                return "High - Contains critical rules that must be followed";
            if (errorRules > 2)
                return "Medium-High - Contains multiple error-level rules";
            if (ruleCount > 5)
                return "Medium - Contains many rules to follow";
            return "Low - Minimal impact on code generation";
        }

        private string GenerateImplementationGuidance(CodingStandard standard)
        {
            var guidance = new List<string>
            {
                $"Apply {standard.Name} to {standard.Language} code generation",
                $"Focus on {string.Join(", ", standard.Rules.Where(r => r.IsEnabled).Select(r => r.Category).Distinct())} categories"
            };

            if (standard.Rules.Any(r => r.IsEnabled && r.Severity == CodingStandardSeverity.Critical))
            {
                guidance.Add("Pay special attention to critical severity rules");
            }

            if (standard.Rules.Any(r => r.IsEnabled && r.Type == CodingStandardRuleType.Security))
            {
                guidance.Add("Ensure security rules are strictly followed");
            }

            return string.Join(". ", guidance) + ".";
        }

        private double CalculateAverageQualityScore(CodingStandardAnalyzerStatistics statistics)
        {
            // This would typically be calculated from actual validation results
            // For now, return a placeholder value
            return statistics.TotalValidations > 0 ? 85.0 : 0.0;
        }
    }

    /// <summary>
    /// Represents the result of validating code generated by an agent.
    /// </summary>
    public class AgentCodeValidationResult
    {
        /// <summary>
        /// Gets or sets the ID of the agent that generated the code.
        /// </summary>
        public string AgentId { get; set; } = string.Empty;

        /// <summary>
        /// Gets or sets the file path of the generated code.
        /// </summary>
        public string? FilePath { get; set; }

        /// <summary>
        /// Gets or sets the validation result.
        /// </summary>
        public CodingStandardValidationResult? ValidationResult { get; set; }

        /// <summary>
        /// Gets or sets whether the code is valid according to coding standards.
        /// </summary>
        public bool IsValid { get; set; }

        /// <summary>
        /// Gets or sets the quality score of the code.
        /// </summary>
        public int QualityScore { get; set; }

        /// <summary>
        /// Gets or sets the fixed code (if auto-fix was applied).
        /// </summary>
        public string? FixedCode { get; set; }

        /// <summary>
        /// Gets or sets the list of applied fixes.
        /// </summary>
        public List<string> AppliedFixes { get; set; } = new List<string>();

        /// <summary>
        /// Gets or sets whether auto-fix was applied.
        /// </summary>
        public bool WasAutoFixed { get; set; }

        /// <summary>
        /// Gets or sets the validation result for the fixed code.
        /// </summary>
        public CodingStandardValidationResult? FixedValidationResult { get; set; }

        /// <summary>
        /// Gets or sets whether the code is valid after auto-fix.
        /// </summary>
        public bool IsValidAfterFix { get; set; }

        /// <summary>
        /// Gets or sets the quality score after auto-fix.
        /// </summary>
        public int QualityScoreAfterFix { get; set; }

        /// <summary>
        /// Gets or sets any error message if validation failed.
        /// </summary>
        public string? ErrorMessage { get; set; }
    }

    /// <summary>
    /// Represents a coding standards recommendation for an agent.
    /// </summary>
    public class CodingStandardRecommendation
    {
        /// <summary>
        /// Gets or sets the agent ID.
        /// </summary>
        public string AgentId { get; set; } = string.Empty;

        /// <summary>
        /// Gets or sets the standard ID.
        /// </summary>
        public string StandardId { get; set; } = string.Empty;

        /// <summary>
        /// Gets or sets the standard name.
        /// </summary>
        public string StandardName { get; set; } = string.Empty;

        /// <summary>
        /// Gets or sets the description of the recommendation.
        /// </summary>
        public string Description { get; set; } = string.Empty;

        /// <summary>
        /// Gets or sets the priority of the recommendation.
        /// </summary>
        public int Priority { get; set; }

        /// <summary>
        /// Gets or sets the rules included in this recommendation.
        /// </summary>
        public List<CodingStandardRule> Rules { get; set; } = new List<CodingStandardRule>();

        /// <summary>
        /// Gets or sets the estimated impact of implementing this recommendation.
        /// </summary>
        public string EstimatedImpact { get; set; } = string.Empty;

        /// <summary>
        /// Gets or sets the implementation guidance.
        /// </summary>
        public string ImplementationGuidance { get; set; } = string.Empty;
    }

    /// <summary>
    /// Represents a summary of coding standards compliance across all agents.
    /// </summary>
    public class CodingStandardsComplianceSummary
    {
        /// <summary>
        /// Gets or sets the total number of agents.
        /// </summary>
        public int TotalAgents { get; set; }

        /// <summary>
        /// Gets or sets the number of configured agents.
        /// </summary>
        public int ConfiguredAgents { get; set; }

        /// <summary>
        /// Gets or sets the total number of standards.
        /// </summary>
        public int TotalStandards { get; set; }

        /// <summary>
        /// Gets or sets the number of enabled standards.
        /// </summary>
        public int EnabledStandards { get; set; }

        /// <summary>
        /// Gets or sets the total number of rules.
        /// </summary>
        public int TotalRules { get; set; }

        /// <summary>
        /// Gets or sets the number of enabled rules.
        /// </summary>
        public int EnabledRules { get; set; }

        /// <summary>
        /// Gets or sets the total number of validations performed.
        /// </summary>
        public long TotalValidations { get; set; }

        /// <summary>
        /// Gets or sets the total number of violations found.
        /// </summary>
        public long TotalViolations { get; set; }

        /// <summary>
        /// Gets or sets the total number of auto-fixes applied.
        /// </summary>
        public long TotalAutoFixes { get; set; }

        /// <summary>
        /// Gets or sets the average quality score.
        /// </summary>
        public double AverageQualityScore { get; set; }

        /// <summary>
        /// Gets or sets the last update time.
        /// </summary>
        public DateTime LastUpdated { get; set; }

        /// <summary>
        /// Gets or sets the compliance data for each agent.
        /// </summary>
        public List<AgentComplianceData> AgentCompliance { get; set; } = new List<AgentComplianceData>();
    }

    /// <summary>
    /// Represents compliance data for a specific agent.
    /// </summary>
    public class AgentComplianceData
    {
        /// <summary>
        /// Gets or sets the agent ID.
        /// </summary>
        public string AgentId { get; set; } = string.Empty;

        /// <summary>
        /// Gets or sets whether the agent is configured.
        /// </summary>
        public bool IsConfigured { get; set; }

        /// <summary>
        /// Gets or sets the number of applied standards.
        /// </summary>
        public int AppliedStandards { get; set; }

        /// <summary>
        /// Gets or sets the severity threshold for the agent.
        /// </summary>
        public CodingStandardSeverity SeverityThreshold { get; set; }

        /// <summary>
        /// Gets or sets whether auto-fix is enabled for the agent.
        /// </summary>
        public bool AutoFixEnabled { get; set; }
    }
}
