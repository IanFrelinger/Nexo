using System;
using System.Collections.Generic;
namespace Nexo.Core.Domain.ValueObjects
{
    public sealed record ContainerRuntime : IComparable<ContainerRuntime>
    {
        private static readonly HashSet<string> ValidRuntimes = new(StringComparer.OrdinalIgnoreCase)
        {
            "docker", "podman", "containerd", "none"
        };
        public string Value { get; }
        public ContainerRuntime(string value)
        {
            if (string.IsNullOrWhiteSpace(value))
                throw new ArgumentException("Container runtime cannot be empty", nameof(value));
            var normalized = value.ToLowerInvariant();
            if (!ValidRuntimes.Contains(normalized))
                throw new ArgumentException($"Invalid container runtime: {value}. Valid values are: {string.Join(", ", ValidRuntimes)}", nameof(value));
            Value = normalized;
        }
        public static ContainerRuntime Docker => new("docker");
        public static ContainerRuntime Podman => new("podman");
        public static ContainerRuntime Containerd => new("containerd");
        public static ContainerRuntime None => new("none");
        public bool IsAvailable => Value != "none";
        public static implicit operator string(ContainerRuntime runtime) => runtime.Value;
        public override string ToString() => Value;
        public int CompareTo(ContainerRuntime? other) => string.Compare(Value, other?.Value, StringComparison.Ordinal);
    }
}